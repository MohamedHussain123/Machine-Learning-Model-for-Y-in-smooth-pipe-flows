# -*- coding: utf-8 -*-
"""NM project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WI8YUfSOemHfm34xYdyLbmydnG7GbYf2
"""



from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
df = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/smooth pipe.csv')

df.head()

df.info()

# Visualizing data
import seaborn as sns
sns.pairplot(df)

# importing the required module to build the model
from sklearn.linear_model import LinearRegression
# Instantiating the algorithm for building the model
model = LinearRegression()
# selecting the predictors and targets
X = df[["Re","U+"]]
y = df["Y+"]
# building the model using fit() method
model.fit(X,y)
print("Intercept:",model.intercept_ ,"\nCoefficients:",model.coef_)

from sklearn.model_selection import train_test_split
X_train,X_test,Y_train,Y_test = train_test_split(X,y,test_size=0.3, random_state=0)
X_train.shape , X_test.shape

#importing required module to build the model
from sklearn.linear_model import LinearRegression
#building and training the model
model = LinearRegression()
model.fit(X_train,Y_train)
#Evaluating the model on the train and test data for R-Squared score
train_score=model.score(X_train,Y_train)
test_score=model.score(X_test,Y_test)
print('Train Score (R-Squared): ',train_score)
print('Test Score (R-Squared)',test_score)

from sklearn.metrics import mean_squared_error
#root mean square error (RMSE) calculation for train data
train_predictions = model.predict(X_train)
train_RMSE=mean_squared_error(Y_train,train_predictions)**0.5
#root mean square error (RMSE) calculation for test data
test_predictions = model.predict(X_test)
test_RMSE=mean_squared_error(Y_test,test_predictions)**0.5
print('Train RMSE : ',train_RMSE)
print('Test RMSE : ',test_RMSE)

from sklearn.neural_network import MLPRegressor
nn_model=MLPRegressor(activation='tanh')
nn_model = MLPRegressor(hidden_layer_sizes=(100))
nn_model.fit(X_train,Y_train)
nn_train_score=model.score(X_train,Y_train)
nn_test_score=model.score(X_test,Y_test)
print('Train Score (R-Squared): ',nn_train_score)
print('Test Score (R-Squared)',nn_test_score)

from sklearn.svm import SVR


# Build the model
svr = SVR(kernel = 'poly', C=100, epsilon=1)
svr.fit(X_train,Y_train)
svr_train_score=model.score(X_train,Y_train)
svr_test_score=model.score(X_test,Y_test)
print('Train Score1 (R-Squared):',svr_train_score)
print('Test Score1 (R-Squared)',svr_test_score)